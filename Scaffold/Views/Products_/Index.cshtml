@*RUN APP FROM HERE*@

@model IEnumerable<Scaffold.Models.Products_>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")<br/>
    @Html.ActionLink("CreateV3", "Create", new RouteValueDictionary(new { locale = "en-US", year = DateTime.Now.Year.ToString() }))
</p>

@{ 
    //belongs to version 4
    var myDictionary = new Dictionary<string, object>();
    myDictionary.Add("First", "A");
    myDictionary.Add("Second", "B");
    myDictionary.Add("third", "C");
}

@*the ActionLink below uses the variable myDictionary passed in 
    and we see First=A et cetera in the url when it's run.
    The routeValues we pass in represent a dicitonary of values
    that are mapped to a specific route defined in your RouteConfig.cs 
    *@
@Html.ActionLink("CreateV4", "Create", new RouteValueDictionary(myDictionary))

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Price)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Price)
        </td>
        <td>
            @*the id below is passed to RouteConfig.cs, 
                if it's id=item.ProductId, somesuch=456,
                that will also go in browser url*@

            @Html.ActionLink("Edit", "Edit", new { id=item.ProductId, somesuch=456 }) |
            @Html.ActionLink("Details", "Details", new { id=item.ProductId }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ProductId })
        </td>
    </tr>
}

</table>
